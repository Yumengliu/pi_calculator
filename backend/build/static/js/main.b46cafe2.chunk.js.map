{"version":3,"sources":["utilities/calculation.js","components/visualization.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["calculatePi","data","totalNumPoints","numPointsInCircle","dataPoints","i","x","y","color","Math","sqrt","push","quarterCycleData","angle0","angle","PI","radius0","radius","opacity","Visualization","width","height","xDomain","yDomain","colorType","radiusDomain","this","props","size","React","Component","Form","state","value","piResult","calculating","handleChange","bind","handleSubmit","event","setState","target","fetch","then","res","json","calculateResult","err","console","log","preventDefault","result","onSubmit","type","onChange","disabled","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAwBeA,MAxBf,SAAqBC,EAAMC,GAGvB,IAFA,IAAIC,EAAoB,EACpBC,EAAa,GACRC,EAAI,EAAGA,EAAIH,EAAgBG,IAAM,CACtC,IAAMC,EAAIL,EAAKI,GAAG,GACZE,EAAIN,EAAKI,GAAG,GAEdG,EAAQ,MADKC,KAAKC,KAAKJ,EAAIA,EAAIC,EAAIA,IAEvB,IACZJ,IACAK,EAAQ,SAERH,GAAK,KAGTD,EAAWO,KAAK,CACZL,EAAGA,EACHC,EAAGA,EACHC,MAAOA,IAGf,MAAO,CAAEL,EAAoBD,EAAkB,EAAKE,I,OCVlDQ,EAAmB,CACrB,CACIC,OAAQ,EACRC,MAAOL,KAAKM,GAAK,EACjBC,QAAS,EACTC,OAAQ,EACRT,MAAO,QACPU,QAAS,KAoBFC,E,uKAbP,OACA,kBAAC,IAAD,CAAQC,MAAO,IAAKC,OAAQ,IAAKC,QAAS,CAAC,EAAE,GAAIC,QAAS,CAAC,EAAE,IACzD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWC,UAAU,UAAUvB,KAAMW,EAAkBa,aAAc,CAAC,EAAG,KACzE,kBAAC,IAAD,CAAYD,UAAU,UAAUvB,KAAMyB,KAAKC,MAAM1B,KAAM2B,KAAK,W,GAV5CC,IAAMC,WCiCnBC,E,kDAlDX,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CAACC,MAAO,EAAGC,SAAU,EAAKjC,KAAM,GAAIkC,aAAa,GAC9D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,yDAONE,GACXb,KAAKc,SAAS,CAACP,MAAOM,EAAME,OAAOR,U,mCAGxBM,GAAQ,IAAD,OAClBb,KAAKc,SAAS,CAACL,aAAa,IAC5BO,MAAM,iBAAmBhB,KAAKM,MAAMC,OACjCU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA1C,GACJ,IAAM6C,EAAkB9C,EAAYC,EAAM,EAAK+B,MAAMC,OACrD,EAAKO,SAAS,CAACP,MAAO,EAAKD,MAAMC,MAAOC,SAAUY,EAAgB,GAAI7C,KAAM6C,EAAgB,GAAIX,aAAa,OAE/G,SAACY,GAAD,OAASC,QAAQC,IAAIF,MAEvBR,EAAMW,mB,+BAIN,IACIC,EAMJ,OAJEA,EAHkBzB,KAAKM,MAAMG,YAGpB,6CAEA,yCAAeT,KAAKM,MAAME,SAA1B,KAGT,6BACE,6CACA,0BAAMkB,SAAU1B,KAAKY,cACnB,mDAEE,2BAAOe,KAAK,OAAOpB,MAAOP,KAAKM,MAAMC,MAAOqB,SAAU5B,KAAKU,gBAE7D,2BAAOiB,KAAK,SAASpB,MAAM,OAAOsB,SAAU7B,KAAKM,MAAMG,eAEzD,6EACA,kBAAC,EAAD,CAAelC,KAAQyB,KAAKM,MAAM/B,OACjCkD,O,GA7CQtB,IAAMC,WCQV0B,MARf,WACE,OACE,yBAAKC,MAAM,QACT,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.b46cafe2.chunk.js","sourcesContent":["function calculatePi(data, totalNumPoints) {\n    var numPointsInCircle = 0;\n    var dataPoints = []\n    for (var i = 0; i < totalNumPoints; i ++) {\n        const x = data[i][0];\n        const y = data[i][1];\n        const distance = Math.sqrt(x * x + y * y);\n        var color = \"red\";\n        if (distance <= 1.0) {\n            numPointsInCircle ++;\n            color = \"green\";\n        }\n        if (i >= 5000) {\n            continue;\n        }\n        dataPoints.push({\n            x: x,\n            y: y,\n            color: color,\n        })\n    }\n    return [(numPointsInCircle / totalNumPoints) * 4.0, dataPoints];\n};\n\nexport default calculatePi;","import React from 'react';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    MarkSeries,\n    ArcSeries\n} from 'react-vis'\n\nconst quarterCycleData = [\n    {\n        angle0: 0,\n        angle: Math.PI / 2,\n        radius0: 0,\n        radius: 2,\n        color: \"green\",\n        opacity: 0.2,\n    }\n]\n\nclass Visualization extends React.Component {\n\n    render() {\n        return (\n        <XYPlot width={400} height={400} xDomain={[0,1]} yDomain={[0,1]}>\n            <XAxis/>\n            <YAxis/>\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <ArcSeries colorType=\"literal\" data={quarterCycleData} radiusDomain={[0, 1]} />\n            <MarkSeries colorType=\"literal\" data={this.props.data} size=\"2\" />\n        </XYPlot>\n        );\n    }\n}\n\nexport default Visualization;\n\n\n\n","import React from 'react';\nimport calculatePi from '../utilities/calculation.js';\nimport Visualization from './visualization.js';\n\nclass Form extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {value: 0, piResult: 0.0, data: [], calculating: false};\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n      this.setState({calculating: true});\n      fetch('/api/points?n=' + this.state.value)\n        .then(res => res.json())\n        .then(data => {\n          const calculateResult = calculatePi(data, this.state.value);\n          this.setState({value: this.state.value, piResult: calculateResult[0], data: calculateResult[1], calculating: false});\n        },\n        (err) => console.log(err)\n      );\n      event.preventDefault();\n    }\n  \n    render() {\n      const calculating = this.state.calculating;\n      let result;\n      if (calculating) {\n        result = <p>Calculating...</p>\n      } else {\n        result = <p>PI number: {this.state.piResult} </p>\n      }\n      return (\n        <div>\n          <h2>PI Calculator</h2>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Number of points:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Send\" disabled={this.state.calculating}/>\n          </form>\n          <p>Only the first 5000 data points will be drawn.</p>\n          <Visualization data = {this.state.data} />\n          {result}\n        </div>\n      );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './components/form.js';\n\nfunction App() {\n  return (\n    <div class=\"page\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}